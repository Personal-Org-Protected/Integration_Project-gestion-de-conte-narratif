// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.Property<string>("basket_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isEmpty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Panier vide");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Proprietaire");

                    b.HasKey("basket_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("Panier", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BasketItems", b =>
                {
                    b.Property<int>("IdStoryTelling")
                        .HasColumnType("int");

                    b.Property<string>("basket_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdStoryTelling", "basket_id");

                    b.HasIndex("basket_id");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Chapitre", b =>
                {
                    b.Property<int>("IdChapitre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChapitre"));

                    b.Property<int>("IdImage")
                        .HasColumnType("int")
                        .HasColumnName("Idimage");

                    b.Property<int>("IdStory")
                        .HasColumnType("int")
                        .HasColumnName("Idstory");

                    b.Property<int>("IdStoryTelling")
                        .HasColumnType("int")
                        .HasColumnName("IdstoryTelling");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("IdChapitre");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdStory")
                        .IsUnique();

                    b.HasIndex("IdStoryTelling");

                    b.ToTable("Chapitre", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Commentaires", b =>
                {
                    b.Property<int>("IdCommentaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCommentaire"));

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("commentaire");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("Date de creation");

                    b.Property<int>("IdZone")
                        .HasColumnType("int")
                        .HasColumnName("Zone de Commenataire");

                    b.Property<int?>("like")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Like");

                    b.Property<int>("signal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Signalement");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Proprietaire");

                    b.HasKey("IdCommentaire");

                    b.HasIndex("IdZone");

                    b.ToTable("Commentaire", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Idees", b =>
                {
                    b.Property<int>("IdIdee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIdee"));

                    b.Property<int>("IdStoryTelling")
                        .HasColumnType("int")
                        .HasColumnName("IdStoryTell");

                    b.Property<string>("Idea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Idea");

                    b.HasKey("IdIdee");

                    b.HasIndex("IdStoryTelling");

                    b.ToTable("Idees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("IdImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImage"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("date")
                        .HasColumnName("Date de Creation");

                    b.Property<DateTime>("DateModif")
                        .HasColumnType("date")
                        .HasColumnName("Date de Modification");

                    b.Property<int>("IdTag")
                        .HasColumnType("int");

                    b.Property<string>("NomImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nom");

                    b.Property<string>("PathImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Path");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.Property<string>("descriptionImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Proprietaire");

                    b.HasKey("IdImage");

                    b.HasIndex("IdTag");

                    b.HasIndex("user_id");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.Property<string>("IdLibrary")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameLibrary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nom de Bibliotheque");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Proprietaire");

                    b.HasKey("IdLibrary");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("Bibliotheque", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<int>("idNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idNotification"));

                    b.Property<DateTime>("created")
                        .HasColumnType("date")
                        .HasColumnName("date de notif");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<bool>("read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Lu");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("target");

                    b.HasKey("idNotification");

                    b.HasIndex("user_id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RatingInfos", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("storyTellId")
                        .HasColumnType("int");

                    b.Property<int>("note")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("note");

                    b.HasKey("user_id", "storyTellId");

                    b.HasIndex("storyTellId");

                    b.ToTable("Notes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Story", b =>
                {
                    b.Property<int>("IdStory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStory"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("date")
                        .HasColumnName("Date de Creation");

                    b.Property<DateTime>("DateModif")
                        .HasColumnType("date")
                        .HasColumnName("Date de Modification");

                    b.Property<string>("NomStory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Chapitre");

                    b.Property<string>("TextStory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fond du Chapitre");

                    b.HasKey("IdStory");

                    b.ToTable("Story", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StoryTellBox", b =>
                {
                    b.Property<int>("IdBox")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBox"));

                    b.Property<string>("IdLibrary")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdStoryTell")
                        .HasColumnType("int");

                    b.Property<int>("lastPageChecked")
                        .HasColumnType("int")
                        .HasColumnName("Dernier chapitre lu");

                    b.HasKey("IdBox");

                    b.HasIndex("IdLibrary");

                    b.HasIndex("IdStoryTell");

                    b.ToTable("Box d'Histoire", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StoryTelling", b =>
                {
                    b.Property<int>("IdStoryTelling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStoryTelling"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("date")
                        .HasColumnName("Date de creation de l'Histoire");

                    b.Property<bool>("Finished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Vendable");

                    b.Property<int>("IdZone")
                        .HasColumnType("int");

                    b.Property<string>("NameStory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nom Histoire");

                    b.Property<int>("Signal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("nombre de signalement");

                    b.Property<string>("Sypnopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resume");

                    b.Property<int?>("idTag")
                        .HasColumnType("int");

                    b.Property<int>("numberRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("nombre de vente");

                    b.Property<double?>("rating")
                        .HasColumnType("float")
                        .HasColumnName("Popularite");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image vignette");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Proprietaire");

                    b.HasKey("IdStoryTelling");

                    b.HasIndex("IdZone")
                        .IsUnique();

                    b.HasIndex("idTag");

                    b.HasIndex("user_id");

                    b.ToTable("Histoire", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("IdTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTag"));

                    b.Property<string>("NameTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Libelle");

                    b.Property<double>("numberRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Nombre de reference");

                    b.HasKey("IdTag");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date de la transaction");

                    b.Property<string>("NameBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nom du livre");

                    b.Property<int>("StoryTellId")
                        .HasColumnType("int")
                        .HasColumnName("IdStory");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionId");

                    b.HasIndex("StoryTellId");

                    b.HasIndex("user_id");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ZoneCommentary", b =>
                {
                    b.Property<int>("IdZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZone"));

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Actif");

                    b.HasKey("IdZone");

                    b.ToTable("Zone de Commentaire", (string)null);
                });

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Profile Image");

                    b.Property<string>("b2cObjId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Azure Id");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("userRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("member")
                        .HasColumnName("Role of user");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("UserName");

                    b.HasKey("user_id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.HasOne("Domain.Identity.User", "User")
                        .WithOne("Basket")
                        .HasForeignKey("Domain.Entities.Basket", "user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.BasketItems", b =>
                {
                    b.HasOne("Domain.Entities.StoryTelling", "StoryTelling")
                        .WithMany("Items")
                        .HasForeignKey("IdStoryTelling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("basket_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("StoryTelling");
                });

            modelBuilder.Entity("Domain.Entities.Chapitre", b =>
                {
                    b.HasOne("Domain.Entities.Image", "Image")
                        .WithMany("Chapitres")
                        .HasForeignKey("IdImage")
                        .IsRequired()
                        .HasConstraintName("Image_FK");

                    b.HasOne("Domain.Entities.Story", "Story")
                        .WithOne("Chapitre")
                        .HasForeignKey("Domain.Entities.Chapitre", "IdStory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Story_FK");

                    b.HasOne("Domain.Entities.StoryTelling", "StoryTelling")
                        .WithMany("Chapitres")
                        .HasForeignKey("IdStoryTelling")
                        .IsRequired()
                        .HasConstraintName("Histoire_FK");

                    b.Navigation("Image");

                    b.Navigation("Story");

                    b.Navigation("StoryTelling");
                });

            modelBuilder.Entity("Domain.Entities.Commentaires", b =>
                {
                    b.HasOne("Domain.Entities.ZoneCommentary", "ZoneCommentary")
                        .WithMany("Commentaires")
                        .HasForeignKey("IdZone")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Zone Comm");

                    b.Navigation("ZoneCommentary");
                });

            modelBuilder.Entity("Domain.Entities.Idees", b =>
                {
                    b.HasOne("Domain.Entities.StoryTelling", "StoryTelling")
                        .WithMany("Idees")
                        .HasForeignKey("IdStoryTelling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("History_FK");

                    b.Navigation("StoryTelling");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.Tag", "Tags")
                        .WithMany("Image")
                        .HasForeignKey("IdTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Tag_FK");

                    b.HasOne("Domain.Identity.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("user_id")
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.HasOne("Domain.Identity.User", "Owner")
                        .WithOne("Library")
                        .HasForeignKey("Domain.Entities.Library", "user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Identity.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RatingInfos", b =>
                {
                    b.HasOne("Domain.Entities.StoryTelling", "StoryTell")
                        .WithMany("Ratings")
                        .HasForeignKey("storyTellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StoryTell");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.StoryTellBox", b =>
                {
                    b.HasOne("Domain.Entities.Library", "StoryTellLibrary")
                        .WithMany("StoryTellBoxes")
                        .HasForeignKey("IdLibrary")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Library_ref");

                    b.HasOne("Domain.Entities.StoryTelling", "StoryTelling")
                        .WithMany("StoryTellBox")
                        .HasForeignKey("IdStoryTell")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StoryTellLibrary");

                    b.Navigation("StoryTelling");
                });

            modelBuilder.Entity("Domain.Entities.StoryTelling", b =>
                {
                    b.HasOne("Domain.Entities.ZoneCommentary", "ZoneCommentary")
                        .WithOne("StoryTelling")
                        .HasForeignKey("Domain.Entities.StoryTelling", "IdZone")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", "Tags")
                        .WithMany("StoryTellings")
                        .HasForeignKey("idTag")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Domain.Identity.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("User");

                    b.Navigation("ZoneCommentary");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.StoryTelling", "StoryTelling")
                        .WithMany("Transactions")
                        .HasForeignKey("StoryTellId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Identity.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StoryTelling");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Navigation("Chapitres");
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.Navigation("StoryTellBoxes");
                });

            modelBuilder.Entity("Domain.Entities.Story", b =>
                {
                    b.Navigation("Chapitre")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.StoryTelling", b =>
                {
                    b.Navigation("Chapitres");

                    b.Navigation("Idees");

                    b.Navigation("Items");

                    b.Navigation("Ratings");

                    b.Navigation("StoryTellBox");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("StoryTellings");
                });

            modelBuilder.Entity("Domain.Entities.ZoneCommentary", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("StoryTelling")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.Navigation("Basket")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Library")
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Ratings");

                    b.Navigation("Stories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
