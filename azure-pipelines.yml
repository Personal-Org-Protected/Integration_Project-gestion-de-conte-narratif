trigger:
- main

pool:
  vmImage: 'windows-latest'

parameters:
  - name: variableGroup
    type: string
    default: vg-storytelling-aspnet
  - name: serviceConnection
    type: string
    default: Visual Studio Professional Subscription(0f7a3b62-c1a4-4aa9-97c3-3bf5f497b5ab)
  - name: environment
    type: string
    default: dev
    values:
      - dev
      - acc
      - prod

variables:
  - group: ${{ parameters.variableGroup }}
  - name: version
    value: 001
  - name: rgName
    value: "rg-$(companyShort)-$(domainShort)-$(appShort)-$(locationAbbr)-${{ parameters.environment }}-$(version)"
  - name: buildConfiguration
    value: "Release"
  - name : mainProjectLocation
    value: "src/StoryTellingApi"
  - name: databaseProjectLocation
    value: "src/Infrastructure"

stages:
  - template: "./Pipelines/build.yml@self"
    parameters:
      stage: "StageBuild$(application)"
      application: "$(application)"
      apiProjectLocation: "$(mainProjectLocation)"
      dbProjectLocation: "$(databaseProjectLocation)"
      buildConfig: "$(buildConfiguration)"
      connectionString: "$(connectionString)"
      connectionPrincipal: "${{ parameters.serviceConnection }}"

  # - template: "./Pipelines/azure_resources.yml@self"
  #   parameters:
  #     stage: StageProvisionInfrastructureAppService
  #     dependsOn:
  #       - StageBuild$(application)
  #     condition: succeeded()
  #     resource: "Data Factory"
  #     serviceConnection: "${{ parameters.serviceConnection }}"
  #     rgName: "$(rgName)"
  #     infraPath: "infra/data-factory"
  #     location: "$(location)"
  #     owner: "$(owner)"
  #     costCenter: "$(costCenter)"
  #     application: "$(application)"
  #     desc: "$(desc)"
  #     repo: "$(repo)"
  #     appShort: "$(appShort)"
  #     domainShort: "$(domainShort)"
  #     version: "$(version)"
  #     env: "${{ parameters.environment }}"

  # - template: "./Pipelines/deploy.yml@self"
  #   parameters:
  #     stage: StageProvisionInfrastructureAppService
  #     dependsOn:
  #       - StageProvisionInfrastructureLogAnalytics
  #     condition: succeeded()
  #     serviceConnection: "${{ parameters.serviceConnection }}"
  #     rgName: "$(rgName)"
  #     application: "$(application)"
  #     version: "$(version)"
  #     env: "${{ parameters.environment }}"
